{"version":3,"sources":["App.js","serviceWorker.js","components/Posts.js","components/Pagination.js","components/MainComp.js","index.js"],"names":["React","Component","Boolean","window","location","hostname","match","Posts","posts","loading","useState","modalIsOpen","setModalIsOpen","selectedUsers","fetchSUser","currentUser","id","console","log","map","post","className","onClick","key","src","avatar","first_name","last_name","isOpen","onRequestClose","email","Pagination","postsPerPage","totalPosts","paginate","pageNumbers","i","Math","ceil","push","number","href","Modal","setAppElement","MainComp","setPosts","setLoading","currentPage","setCurrentPage","useEffect","a","axios","get","res","data","fetchPosts","indexOfLastPost","indexOfFirstPost","currentPosts","slice","length","pageNumber","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c825b228.chunk.js","sourcesContent":["import React from 'react';\n\n\nclass App extends React.Component {\n  state = {\n    users: null,\n    show: false,\n    selectedUser: '',\n    activities: [],\n    pg:1\n  }\n\n\n  async componentDidMount() {\n    fetch(`https://reqres.in/api/users?page=${this.state.pg}`)\n      .then((resp) => {\n        resp.json().then((result) => {\n          console.log(result.data);\n          this.setState({ users: result.data })\n          \n        })\n      })\n      \n\n  }\n  render() {\n    \n    return (\n      <div className=\"main_div center_div\">\n      {/* <h1 className=\"header\" >User List </h1> */}\n\n\n      {\n        this.state.users ?\n          this.state.users.map(item =>\n\n            <div>\n              <ul className=\"list-group d-flex w-100 justify-content-between\">\n                <li key={item.id}  className=\"list-group-item content\">\n                  {/* this.handleModal(); */}\n                  <a onClick={() => { this.fetchUser(item); this.handleModal() }} className=\"list-group-item list-group-item-action\">\n                    {item.first_name}\n\n\n                  </a>\n                </li>\n              </ul>\n\n              \n            </div>\n\n          )\n          :\n          null\n      }\n      \n\n    </div>\n)\n}\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from 'react';\nimport Modal from 'react-modal'\nimport '../Modal.css'\n\nconst Posts = ({ posts, loading }) => {\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [selectedUsers, fetchSUser] = useState([]);\n  const currentUser = selectedUsers.id\n  console.log(\"selectedUsers\");\n  console.log(selectedUsers);\n  console.log(currentUser);\n\n\n  if (loading) {\n    return <h2>Loading...</h2>;\n  }\n\n  return (\n    <>\n      <div>\n\n        <table >\n          <tr>\n            <th>User Names</th>\n          </tr >\n          {/* <td > */}\n          {posts.map(post => (\n            <a className=\"click\" onClick={() => { fetchSUser( post ); setModalIsOpen(true) }}>\n              <tr className=\"click\" key={post.id} ><img src={post.avatar}></img> {post.first_name} {post.last_name} </tr>\n            </a>\n\n          ))}\n          {/* </td> */}\n\n\n        </table>\n\n        <Modal isOpen={modalIsOpen} onRequestClose={() => setModalIsOpen(false)} >\n          <div className=\"modal-header\">\n            <span className=\"close\">&times;</span>\n            <h2>{selectedUsers.first_name} {selectedUsers.last_name}</h2>\n          </div>\n          <div className=\"modal-body\">\n          <h2>{selectedUsers.email}</h2>\n          <img src={selectedUsers.avatar}></img>\n            {/* <Posts  posts={selectedUser} loading={loading} /> */}\n            \n          </div>\n          <div className=\"modal-footer\">\n            <h3></h3>\n          </div>\n          <button className=\"button\" onClick={() => setModalIsOpen(false)}>Close</button>\n        </Modal>\n      </div>\n    </>\n  );\n};\n\nexport default Posts;","import React from 'react';\nimport '../App.css'\n\nconst Pagination = ({ postsPerPage, totalPosts, paginate }) => {\n  const pageNumbers = [];\n\n  for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  return (\n    <nav>\n      <div className=\"pagination\">\n        {pageNumbers.map(number => (\n          // <li key={number} className='page-item'>\n         \n            <a onClick={() => paginate(number)} href='!#' className='page-link'>\n              {number}\n            </a>\n            \n          // </li>\n        ))}\n      </div>\n    </nav>\n  );\n};\n\nexport default Pagination;","import React, { useState, useEffect } from 'react';\nimport Posts from './Posts'\nimport axios from 'axios';\nimport Pagination from './Pagination'\nimport '../App.css'\nimport '../Modal.css'\nimport Modal from 'react-modal'\nModal.setAppElement('#root')\n\n\n// import '../Modal.css'\n// import '../App.css';\n\nconst MainComp = () => {\n    const [posts, setPosts] = useState([]);\n    const [selectedUsers, fetchSUser] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [postsPerPage] = useState(4);\n\n    const [modalIsOpen, setModalIsOpen] = useState(false);\n\n    useEffect(() => {\n        const fetchPosts = async () => {\n            setLoading(true);\n            const res = await axios.get('https://reqres.in/api/users?page=1');\n            setPosts(res.data.data);\n            setLoading(false);\n        };\n\n        fetchPosts();\n    }, []);\n    console.log(\"posts\");\n    console.log(posts);\n\n    // Get current posts\n    const indexOfLastPost = currentPage * postsPerPage;\n    const indexOfFirstPost = indexOfLastPost - postsPerPage;\n    const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\n    const currentUser = selectedUsers.first_name\n    // const selectedUser = posts\n\n    // Change page\n    const paginate = pageNumber => setCurrentPage(pageNumber);\n\n\n    return (\n        <div className='main-div'>\n            {/* <h1 className='header'>User List</h1> */}\n            <div className=\"content click\">\n\n                {/* <a className=\"click\" onClick={(value) => setModalIsOpen(true)}> */}\n                <Posts posts={currentPosts} loading={loading} />\n            </div>\n            <Pagination\n                postsPerPage={postsPerPage}\n                totalPosts={posts.length}\n                paginate={paginate}\n            />\n            {/* <button onClick={() => setModalIsOpen(true)}>Open Modal</button> */}\n\n\n        </div>\n    );\n};\n\nexport default MainComp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport MainComp from './components/MainComp'\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <App /> */}\n    {/* <FetchApi/> */}\n    <MainComp/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}